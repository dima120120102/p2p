// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ ID
function generatePersistentId() {
    const savedId = localStorage.getItem('peerId');
    if (savedId) return savedId;
    
    const randomId = 'peer-' + Math.random().toString(36).substr(2, 9);
    localStorage.setItem('peerId', randomId);
    return randomId;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Peer
const peer = new Peer(generatePersistentId(), {
    host: '0.peerjs.com',
    port: 443,
    secure: true,
    config: {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
            { urls: 'stun:stun2.l.google.com:19302' },
            { urls: 'turn:openrelay.metered.ca:80', username: 'openrelayproject', credential: 'openrelayproject' },
            { urls: 'turn:openrelay.metered.ca:443', username: 'openrelayproject', credential: 'openrelayproject' },
            { urls: 'turn:openrelay.metered.ca:443', username: 'openrelayproject', credential: 'openrelayproject', transport: 'tcp' }
        ]
    },
    debug: 3
});

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const yourIdElement = document.getElementById('your-id');
const peerIdInput = document.getElementById('peer-id');
const contactNameInput = document.getElementById('contact-name');
const chatBox = document.getElementById('chat');
const messageInput = document.getElementById('message');
const contactsList = document.getElementById('contacts-list');
const chatHeader = document.getElementById('chat-header');
const sendBtn = document.getElementById('send-btn');
const recordBtn = document.getElementById('record-btn');
const videoBtn = document.getElementById('video-btn');
const photoInput = document.getElementById('photo-input');
const chatArea = document.querySelector('.chat-area');
const addContactForm = document.querySelector('.add-contact');
const retryBox = document.querySelector('.retry-box');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let activeConnection = null;
let activeContact = null;
const contacts = JSON.parse(localStorage.getItem('contacts')) || [];
const chatHistories = JSON.parse(localStorage.getItem('chatHistories')) || {};
const contactAliases = JSON.parse(localStorage.getItem('contactAliases')) || {};
const unreadMessages = JSON.parse(localStorage.getItem('unreadMessages')) || {};
let mediaRecorder = null;
let audioChunks = [];
let videoChunks = [];
let isRecording = false;
let isVideoRecording = false;
let replyingTo = null;
let reconnectAttempts = 0;
const maxReconnectAttempts = 3;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
peer.on('open', (id) => {
    console.log('PeerJS: –ü–æ–¥–∫–ª—é—á–µ–Ω —Å ID', id);
    appendSystemMessage(`‚úÖ –í–∞—à ID: ${id}`);
    yourIdElement.textContent = id;
    renderContacts();
    updateUI();
});

// –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
function copyId() {
    navigator.clipboard.writeText(yourIdElement.textContent);
    alert('ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
function toggleAddContact() {
    addContactForm.style.display = addContactForm.style.display === 'none' ? 'flex' : 'none';
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É
function connect() {
    const friendId = peerIdInput.value.trim();
    const contactName = contactNameInput.value.trim();
    if (!friendId) return alert('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞!');
    if (friendId === peer.id) return alert('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!');
    
    if (!contacts.includes(friendId)) {
        contacts.push(friendId);
        localStorage.setItem('contacts', JSON.stringify(contacts));
        
        if (contactName) {
            contactAliases[friendId] = contactName;
            localStorage.setItem('contactAliases', JSON.stringify(contactAliases));
        }
        
        if (!chatHistories[friendId]) {
            chatHistories[friendId] = [];
            saveChatHistories();
        }
    }
    
    peerIdInput.value = '';
    contactNameInput.value = '';
    toggleAddContact();
    renderContacts();
    startChat(friendId);
}

// –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
function startChat(contactId) {
    if (activeConnection && activeContact === contactId) {
        console.log('–£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫', contactId);
        return;
    }
    
    if (activeConnection) {
        console.log('–ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', activeContact);
        activeConnection.close();
    }
    
    activeContact = contactId;
    const displayName = contactAliases[contactId] || contactId;
    chatHeader.textContent = `–ß–∞—Ç —Å ${displayName}`;
    renderChatHistory(contactId);
    chatArea.style.display = 'flex';
    retryBox.style.display = 'none';
    reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (unreadMessages[contactId]) {
        delete unreadMessages[contactId];
        saveUnreadMessages();
    }
    renderContacts();
    updateUI();
    
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫', contactId);
    const conn = peer.connect(contactId);
    setupConnection(conn);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
function closeChat() {
    if (activeConnection) {
        console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å', activeContact);
        activeConnection.close();
        activeConnection = null;
    }
    activeContact = null;
    chatArea.classList.add('closing');
    setTimeout(() => {
        chatArea.style.display = 'none';
        chatArea.classList.remove('closing');
    }, 300);
    chatHeader.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç';
    chatBox.innerHTML = '';
    replyingTo = null;
    messageInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...';
    updateUI();
}

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function retryConnection() {
    if (activeContact) {
        console.log('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫', activeContact);
        reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        const conn = peer.connect(activeContact);
        setupConnection(conn);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
function attemptReconnect(contactId) {
    if (reconnectAttempts >= maxReconnectAttempts) {
        appendSystemMessage(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${maxReconnectAttempts})`);
        retryBox.style.display = 'block';
        return;
    }
    
    reconnectAttempts++;
    appendSystemMessage(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts}/${maxReconnectAttempts}`);
    const conn = peer.connect(contactId);
    setupConnection(conn);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function setupConnection(conn) {
    activeConnection = conn;
    
    conn.on('open', () => {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å', conn.peer);
        appendSystemMessage(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å ${contactAliases[conn.peer] || conn.peer}`);
        reconnectAttempts = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        retryBox.style.display = 'none';
        updateUI();
    });
    
    conn.on('data', (data) => {
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç', conn.peer, ':', data);
        let message;
        if (typeof data === 'string') {
            message = { type: 'text', content: data };
        } else {
            message = data;
        }
        if (activeContact === conn.peer) {
            appendMessage(message, 'them');
            saveMessage(message, 'them');
        } else {
            unreadMessages[conn.peer] = (unreadMessages[conn.peer] || 0) + 1;
            saveUnreadMessages();
            appendSystemMessage(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${contactAliases[conn.peer] || conn.peer}`);
            renderContacts();
        }
    });
    
    conn.on('close', () => {
        console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å', conn.peer, '–∑–∞–∫—Ä—ã—Ç–æ');
        appendSystemMessage(`‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${contactAliases[conn.peer] || conn.peer} –∑–∞–∫—Ä—ã—Ç–æ`);
        activeConnection = null;
        if (activeContact === conn.peer) {
            setTimeout(() => attemptReconnect(conn.peer), 2000); // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        }
        updateUI();
    });
    
    conn.on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å', conn.peer, ':', err);
        appendSystemMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${contactAliases[conn.peer] || conn.peer}: ${err.message}`);
        activeConnection = null;
        if (activeContact === conn.peer && err.type === 'peer-unavailable') {
            setTimeout(() => attemptReconnect(conn.peer), 2000);
        } else {
            retryBox.style.display = 'block';
        }
        updateUI();
    });
    
    conn.on('iceStateChange', (state) => {
        console.log('ICE state changed to', state, 'for', conn.peer);
        appendSystemMessage(`‚ÑπÔ∏è ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`);
    });
}

// –ü—Ä–∏—ë–º –≤—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
peer.on('connection', (conn) => {
    const contactId = conn.peer;
    console.log('–í—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç', contactId);
    
    if (!contacts.includes(contactId)) {
        contacts.push(contactId);
        localStorage.setItem('contacts', JSON.stringify(contacts));
        
        if (!chatHistories[contactId]) {
            chatHistories[contactId] = [];
            saveChatHistories();
        }
    }
    
    if (activeContact === contactId) {
        setupConnection(conn);
    } else {
        conn.on('open', () => {
            console.log('–í—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –æ—Ç', contactId, '–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ');
            conn.close();
        });
    }
    
    renderContacts();
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function send() {
    if (!activeConnection || !activeContact) return;
    
    const messageContent = messageInput.value.trim();
    if (!messageContent) return;
    
    const message = replyingTo
        ? { type: 'text', content: messageContent, replyTo: replyingTo }
        : { type: 'text', content: messageContent };
    
    try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message);
        activeConnection.send(message);
        appendMessage(message, 'you');
        saveMessage(message, 'you');
        messageInput.value = '';
        replyingTo = null;
        messageInput.placeholder = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...';
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
        appendSystemMessage('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
}

// –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function startRecording() {
    if (!activeConnection || !activeContact) return;
    
    if (!isRecording) {
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];
                
                mediaRecorder.ondataavailable = (e) => {
                    audioChunks.push(e.data);
                };
                
                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    const reader = new FileReader();
                    reader.readAsDataURL(audioBlob);
                    reader.onloadend = () => {
                        const base64Audio = reader.result;
                        const message = { type: 'audio', content: base64Audio };
                        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
                        activeConnection.send(message);
                        appendMessage(message, 'you');
                        saveMessage(message, 'you');
                    };
                    
                    stream.getTracks().forEach(track => track.stop());
                };
                
                mediaRecorder.start();
                isRecording = true;
                recordBtn.textContent = '‚èπÔ∏è';
                recordBtn.title = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
                recordBtn.classList.add('recording');
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:', err);
                appendSystemMessage('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å');
            });
    } else {
        mediaRecorder.stop();
        isRecording = false;
        recordBtn.textContent = 'üéôÔ∏è';
        recordBtn.title = '–ó–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
        recordBtn.classList.remove('recording');
    }
}

// –ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–µ
function startVideoRecording() {
    if (!activeConnection || !activeContact) return;
    
    if (!isVideoRecording) {
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                mediaRecorder = new MediaRecorder(stream);
                videoChunks = [];
                
                mediaRecorder.ondataavailable = (e) => {
                    videoChunks.push(e.data);
                };
                
                mediaRecorder.onstop = () => {
                    const videoBlob = new Blob(videoChunks, { type: 'video/webm' });
                    const reader = new FileReader();
                    reader.readAsDataURL(videoBlob);
                    reader.onloadend = () => {
                        const base64Video = reader.result;
                        const message = { type: 'video', content: base64Video };
                        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–µ');
                        activeConnection.send(message);
                        appendMessage(message, 'you');
                        saveMessage(message, 'you');
                    };
                    
                    stream.getTracks().forEach(track => track.stop());
                };
                
                mediaRecorder.start();
                isVideoRecording = true;
                videoBtn.textContent = '‚èπÔ∏è';
                videoBtn.title = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å';
                videoBtn.classList.add('recording');
                
                setTimeout(() => {
                    if (isVideoRecording) {
                        mediaRecorder.stop();
                        isVideoRecording = false;
                        videoBtn.textContent = 'üé•';
                        videoBtn.title = '–ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–µ';
                        videoBtn.classList.remove('recording');
                    }
                }, 15000);
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ:', err);
                appendSystemMessage('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ');
            });
    } else {
        mediaRecorder.stop();
        isVideoRecording = false;
        videoBtn.textContent = 'üé•';
        videoBtn.title = '–ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ –≤ –∫—Ä—É–∂–æ—á–∫–µ';
        videoBtn.classList.remove('recording');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
photoInput.addEventListener('change', () => {
    if (!activeConnection || !activeContact) return;
    
    const file = photoInput.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onloadend = () => {
        const base64Image = reader.result;
        const message = { type: 'image', content: base64Image };
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        activeConnection.send(message);
        appendMessage(message, 'you');
        saveMessage(message, 'you');
        photoInput.value = '';
    };
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
function saveMessage(message, sender) {
    if (!chatHistories[activeContact]) {
        chatHistories[activeContact] = [];
    }
    
    chatHistories[activeContact].push({
        ...message,
        sender: sender,
        timestamp: new Date().toISOString()
    });
    
    saveChatHistories();
}

function saveChatHistories() {
    localStorage.setItem('chatHistories', JSON.stringify(chatHistories));
}

function saveUnreadMessages() {
    localStorage.setItem('unreadMessages', JSON.stringify(unreadMessages));
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
function editContactName(contactId) {
    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', contactAliases[contactId] || '');
    if (newName !== null) {
        const trimmedName = newName.trim();
        if (trimmedName) {
            contactAliases[contactId] = trimmedName;
        } else {
            delete contactAliases[contactId];
        }
        localStorage.setItem('contactAliases', JSON.stringify(contactAliases));
        renderContacts();
        if (activeContact === contactId) {
            const displayName = contactAliases[contactId] || contactId;
            chatHeader.textContent = `–ß–∞—Ç —Å ${displayName}`;
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
function checkContactStatus(contactId) {
    return new Promise((resolve) => {
        const conn = peer.connect(contactId);
        conn.on('open', () => {
            conn.close();
            resolve(true);
        });
        conn.on('error', () => resolve(false));
        setTimeout(() => resolve(false), 2000);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function renderContacts() {
    contactsList.innerHTML = '';
    
    if (contacts.length === 0) {
        contactsList.innerHTML = '<div class="no-contacts">–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</div>';
        return;
    }
    
    for (const contactId of contacts) {
        const displayName = contactAliases[contactId] || contactId;
        const isOnline = await checkContactStatus(contactId);
        const unreadCount = unreadMessages[contactId] || 0;
        
        const contactElement = document.createElement('div');
        contactElement.className = 'contact';
        contactElement.innerHTML = `
            <span class="status-indicator ${isOnline ? 'online' : 'offline'}"></span>
            <span class="contact-name">${displayName}</span>
            ${unreadCount > 0 ? `<span class="unread-count">${unreadCount}</span>` : ''}
            <button class="edit-contact-btn" onclick="editContactName('${contactId}')">‚úé</button>
        `;
        
        if (contactId === activeContact) {
            contactElement.classList.add('active-contact');
        }
        
        contactElement.querySelector('.contact-name').onclick = () => {
            startChat(contactId);
        };
        
        contactsList.appendChild(contactElement);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
function renderChatHistory(contactId) {
    chatBox.innerHTML = '';
    
    if (!chatHistories[contactId] || chatHistories[contactId].length === 0) {
        appendSystemMessage('–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π');
        return;
    }
    
    chatHistories[contactId].forEach((msg, index) => {
        appendMessage(msg, msg.sender, index);
    });
    
    chatBox.scrollTop = chatBox.scrollHeight;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
function appendMessage(message, sender, index) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('message');
    messageElement.dataset.index = index;
    
    const displayName = contactAliases[activeContact] || activeContact;
    if (sender === 'you') {
        messageElement.classList.add('your-message');
    } else {
        messageElement.classList.add('their-message');
    }
    
    const contentElement = document.createElement('div');
    contentElement.classList.add('message-content');
    
    if (message.replyTo) {
        const replyElement = document.createElement('div');
        replyElement.classList.add('reply-preview');
        const repliedMsg = chatHistories[activeContact][message.replyTo];
        replyElement.textContent = repliedMsg ? `${repliedMsg.sender === 'you' ? '–í—ã' : displayName}: ${repliedMsg.content}` : '–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ';
        messageElement.appendChild(replyElement);
    }
    
    if (message.type === 'text') {
        contentElement.textContent = sender === 'you' ? `–í—ã: ${message.content}` : `${displayName}: ${message.content}`;
    } else if (message.type === 'audio') {
        const audio = document.createElement('audio');
        audio.controls = true;
        audio.src = message.content;
        audio.style.maxWidth = '100%';
        contentElement.appendChild(audio);
        const label = document.createElement('div');
        label.textContent = sender === 'you' ? '–í—ã (–≥–æ–ª–æ—Å–æ–≤–æ–µ):' : `${displayName} (–≥–æ–ª–æ—Å–æ–≤–æ–µ):`;
        contentElement.insertBefore(label, audio);
    } else if (message.type === 'image') {
        const img = document.createElement('img');
        img.src = message.content;
        img.style.maxWidth = '100%';
        img.style.borderRadius = '8px';
        contentElement.appendChild(img);
        const label = document.createElement('div');
        label.textContent = sender === 'you' ? '–í—ã (—Ñ–æ—Ç–æ):' : `${displayName} (—Ñ–æ—Ç–æ):`;
        contentElement.insertBefore(label, img);
    } else if (message.type === 'video') {
        const video = document.createElement('video');
        video.controls = true;
        video.src = message.content;
        video.classList.add('circle-video');
        contentElement.appendChild(video);
        const label = document.createElement('div');
        label.textContent = sender === 'you' ? '–í—ã (–≤–∏–¥–µ–æ):' : `${displayName} (–≤–∏–¥–µ–æ):`;
        contentElement.insertBefore(label, video);
    }
    
    messageElement.appendChild(contentElement);
    
    const replyBtn = document.createElement('button');
    replyBtn.classList.add('reply-btn');
    replyBtn.textContent = '–û—Ç–≤–µ—Ç–∏—Ç—å';
    replyBtn.onclick = () => {
        replyingTo = index;
        messageInput.placeholder = `–û—Ç–≤–µ—Ç –Ω–∞: ${message.content.slice(0, 20)}...`;
        messageInput.focus();
    };
    messageElement.appendChild(replyBtn);
    
    chatBox.appendChild(messageElement);
    chatBox.scrollTop = chatBox.scrollHeight;
}

function appendSystemMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('system-message');
    messageElement.textContent = message;
    chatBox.appendChild(messageElement);
    chatBox.scrollTop = chatBox.scrollHeight;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    const isActive = activeConnection && activeContact;
    messageInput.disabled = !isActive;
    sendBtn.disabled = !isActive;
    recordBtn.disabled = !isActive;
    videoBtn.disabled = !isActive;
    photoInput.disabled = !isActive;
    document.getElementById('photo-btn').disabled = !isActive;
    
    if (isActive) {
        messageInput.focus();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') send();
});

peer.on('error', (err) => {
    console.error('PeerJS –æ—à–∏–±–∫–∞:', err);
    appendSystemMessage(`‚ö†Ô∏è –û—à–∏–±–∫–∞ PeerJS: ${err.type} - ${err.message}`);
});

peer.on('disconnected', () => {
    console.log('PeerJS: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    appendSystemMessage('‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ PeerJS');
});

peer.on('close', () => {
    console.log('PeerJS: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ');
    appendSystemMessage('‚ùå PeerJS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
});
